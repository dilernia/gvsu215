test_active_file()
test_active_file()
devtools::load_all(".")
test_active_file()
plot_box(mtcars, ~wt, na_rm = TRUE)
plot_scatter(mtcars, wt~drat)
test_that("scatter works", {
expect_warning(plot_scatter(mtcars, wt~drat))
})
test_that("scatter works", {
expect_message(plot_scatter(mtcars, wt~drat))
})
test_that("scatter works with new fill color", {
expect_message(plot_scatter(mtcars, wt~drat, fill = "#49208a"))
})
plot_scatter(mtcars, wt~drat, x = "yaya", y = "ayay"
plot_scatter(mtcars, wt~drat, x = "yaya", y = "ayay")
plot_scatter(mtcars, wt~drat, axis_lines = "both")
test_that("scatter works with both lines", {
expect_message(plot_scatter(mtcars, wt~drat, axis_lines = "both"))
})
plot_scatter(mtcars, wt~drat, fill = ~cyl)
test_that("scatter works with new legend title", {
expect_message(plot_scatter(mtcars, wt~drat, legend_title = "Cyl"))
})
plot_scatter(mtcars, wt~drat, legend_title = "Cyl")
fill = ~cyl, legend_title = "Cyl"
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
test_that("scatter warns with fill string and legend title", {
expect_warning(plot_scatter(mtcars, wt~drat, legend_title = "Hey!"))
})
test_that("group scatter works with axis lines", {
expect_message(plot_scatter(mtcars, wt~drat, fill = ~cyl, axis_lines = "both"))
})
test_active_file()
source("~/Documents/coding/gvsu215/R/plots.R", echo=TRUE)
library(devtools)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
devtools::load_all(".")
test_active_file()
build_readme()
use_test()
package_version("1.3.dev")
package_version("1.3.1.8888")
devtools::load_all(".")
infer_prop1(mtcars, ~vs, success = 1)
test_that("infer prop 1 works with digits", {
expect_no_condition(infer_prop1(mtcars, ~vs, success = 1, digits = 4))
})
test_active_file()
test_active_file()
test_active_file()
infer_prop2_int(mtcars, vs~am, success = 1)
test_active_file()
infer_mean1(mtcars, ~weight, success = 1)
infer_mean1(mtcars, ~weight)
infer_mean1(mtcars, ~wt)
infer_mean1(mtcars ~wt, conf_lvl = "90%")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
test_active_file()
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
source("~/Documents/coding/gvsu215/R/inference.R", echo=TRUE)
library(devtools)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
levels(factor(mtcars$vs))
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
?levels
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
use_test()
infer_mean2_int(mtcars, wt~vs)
levels(mtcars, vs)
levels(mtcars)
levels(mtcars$vs)
levels(factor(mtcars$vs))
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
mtcars[vs]
mtcars[[vs]]
mtcars[,vs]
mtcars[["vs"]]
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
length(levels(mtcars[["vs"]]))
typeof(levels(mtcars[["vs"]]))
levels(mtcars[["vs"]])
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
test_active_file()
infer_paired(mtcars, var1 = drat, var2 = wt)
mosaic::t_test(x = drat, y = wt, data = mtcars, paired = TRUE)
?t_test
test_that("paired works", {
expect_no_condition(infer_paired(mtcars, var1 = ~drat, var2 = ~wt))
})
mosaic::t_test(x = ~drat, y = ~wt, data = mtcars, paired = TRUE)
?Pair
devtools::load_all(".")
test_that("paired works", {
expect_no_condition(infer_paired(mtcars, var1 = ~drat, var2 = ~wt))
})
infer_paired(mtcars, var1 = ~drat, var2 = ~wt)
devtools::load_all(".")
test_active_file()
test_active_file()
remove.packages("spatial")
remove.packages("terra")
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
?test_that
install.packages(testthat)
install.packages('testthat')
install.packages("tidyverse")
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_active_file()
infer_chisq(mtcars, cyl~gear, type = "observed")
infer_chisq(mtcars, cyl~gear, type = "observed")
test_that("chisq works with specifying observed", {
expect_warning(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
expect_message(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
expect_defunct(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
lifecycle::expect_defunct(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
withr::local_options(lifecycle_verbosity = "quiet")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
withr::local_options(lifecycle_verbosity = "quiet")
test_that("chisq works with specifying observed", {
withr::local_options(lifecycle_verbosity = "quiet")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
withr::local_options(lifecycle_verbosity = "quiet")
lifecycle::expect_deprecated(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
lifecycle::expect_deprecated(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
rlang::local_options(lifecycle_verbosity = "quiet")
lifecycle::expect_deprecated(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
rlang::local_options(lifecycle_verbosity = "quiet")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
update.packages("janitor")
test_active_file()
test_active_file()
test_active_file()
infer_anova(mtcars, cyl~gear)
test_that("anova works", {
expect_no_condition(infer_anova(mtcars, cyl~gear))
})
infer_anova(mtcars, cyl~gear)
expect_no_condition(infer_anova(mtcars, cyl~gear))
update.packages("broom")
infer_chisq(mtcars, cyl~cyl)
test_active_file()
infer_anova(mtcars, cyl~cyl)
devtools::load_all(".")
infer_anova(mtcars, cyl~cyl)
test_that("anova warns with same var", {
expect_warning(infer_anova(mtcars, cyl~cyl))
})
test_that("anova warns with same var", {
expect_error(infer_anova(mtcars, cyl~cyl))
})
test_that("anova warns with same var", {
expect_error(infer_anova(mtcars, cyl~cyl))
})
test_active_file()
test_that("anova warns with same var", {
expect_condition(infer_anova(mtcars, cyl~cyl))
})
?capture_warnings
test_that("anova warns with same var", {
expect_error(supressWarnings(infer_anova(mtcars, cyl~cyl)))
})
infer_anova(mtcars, cyl~cyl)
test_that("anova warns with same var", {
# skip("superceded?")
expect_error(suppressWarnings(infer_anova(mtcars, cyl~cyl)))
})
test_that("anova works", {
skip("superceded?")
expect_no_condition(infer_anova(mtcars, cyl~gear))
})
test_that("anova works", {
# skip("superceded?")
expect_no_condition(infer_anova(mtcars, cyl~gear))
})
test_that("anova works", {
# skip("superceded?")
expect_no_condition(suppressWarnings(infer_anova(mtcars, cyl~gear)))
})
devtools::load_all(".")
test_active_file()
?gf_point
find_na(mtcars, ~cyl)
find_na(mtcars, wt~cyl)
find_na(mtcars, wt~cyl, n = 2)
?lm
check_test(lm(wt~drat, data = mtcars))
check_test(lm(Wt~drat, data = mtcars))
devtools::load_all(".")
?favstqats
?favstats
devtools::load_all(".")
?num_sum
?`::`
?`:=`
expect_warning(pctile(mtcars, ~wt))
pctile(mtcars, ~wt, na_rm = TRUE)
pctile(mtcars, ~wt)
try(pctile(mtcars, ~wt, probs = c(25, 50, 75, 100)))
?pctile
num_sum(mtcars, ~wt)
?pctile
pkgdown::build_site()
plot_bar(mtcars, ~cyl, fill = ~gear)
test_that("bar fails with long formula", {
expect_error(plot_bar(mtcars, cyl~gear, type = "count"))
})
plot_box(mtcars, ~wt)
plot_box(mtcars, gear~wt)
plot_hist(mtcars, ~drat)
library(devtools)
devtools::load_all(".")
plot_hist(mtcars, ~drat)
devtools::load_all(".")
plot_hist(mtcars, ~drat)
plot_hist(mtcars, ~drat, binwidth = 0.05)
plot_hist(mtcars, ~drat, binwidth = 0.05, fill = "red")
plot_hist(mtcars, ~drat, binwidth = 0.05, group = ~cyl)
devtools::load_all(".")
plot_hist(mtcars, ~drat, binwidth = 0.05, group = ~cyl)
source("~/Documents/coding/gvsu215/R/plots.R", echo=TRUE)
devtools::load_all(".")
library(devtools)
devtools::load_all(".")
plot_hist(mtcars, ~drat, binwidth = 0.05, group = ~cyl)
plot_hist(mtcars, ~drat, binwidth = 0.05, group = ~cyl, group_cols = 2)
usethis::use_lifecycle()
devtools::load_all(".")
plot_scatter(mtcars, wt~drat)
plot_scatter(mtcars, wt~drat, fill = "#49208a")
plot_scatter(mtcars, wt~drat, fill = "red")
plot_scatter(mtcars, wt~drat, axis_lines = "both")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
?plot_scatter
devtools::load_all(".")
num_sum(mtcars, ~wt)
num_sum(mtcars, ~wt, na_rm = TRUE)
build_site()
?person
build_site()
pctile(mtcars, ~wt)
pctile(mtcars, ~wt, probs = c(0, .25, .4, .5, .6, .75, 1))
plot_bar(mtcars, ~cyl, type = "percent")
plot_box(mtcars, wt~gear, fill = 'orangered4')
plot_box(mtcars, wt~gear, fill = 'orangered4', x = "Gear", y = "Weight", title = "Boxplot of Weight by Gear")
plot_scatter(mtcars, wt~drat)
infer_prop1(mtcars, ~vs, success = 1)
infer_prop2_test(mtcars, vs~am, success = 1)
infer_mean2_int(mtcars, wt~vs)
infer_chisq(mtcars, cyl~gear)
head(mtcars)
infer_chisq(mtcars, carb~gear)
suppressWarning(infer_chisq(mtcars, cyl~gear))
suppressWarnings(infer_chisq(mtcars, cyl~gear))
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "expected"))
infer_chisq(mtcars, cyl~gear, type = "observed")
test_that("chisq works with specifying observed", {
# skip("superseded?")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
infer_anova(mtcars, cyl~gear)
infer_anova(mtcars, cyl~gear, digits = 2)
build_readme()
infer_prop1(mtcars, ~vs, success = 1)
head(mtcars)
infer_prop2_int(mtcars, vs~am, success = 1)
infer_prop2_int(mtcars, vs~am, success = 1, conf_lvl = .9)
infer_prop2_test(mtcars, vs~am, success = 1)
infer_mean1(mtcars, ~wt)
infer_mean2_int(mtcars, wt~vs)
infer_mean2_test(mtcars, wt~vs)
test_active_file()
test()
use_test()
test_active_file()
use_test()
use_test()
infer_reg(mtcars, drat~wt)
infer_reg(mtcars, drat~wt, simple = FALSE)
devtools::load_all(".")
infer_reg(mtcars, drat~wt, simple = FALSE))
infer_reg(mtcars, drat~wt, simple = FALSE)
devtools::load_all(".")
infer_reg(mtcars, drat~wt, simple = FALSE)
devtools::load_all(".")
infer_reg(mtcars, drat~wt, simple = FALSE)
?summary
devtools::load_all(".")
infer_reg(mtcars, drat~wt, simple = FALSE)
infer_reg(mtcars, drat~wt + qsec)
suppressWarnings(infer_chisq(mtcars, cyl~gear))
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "expected"))
remove.packages("viridis")
install.packages(c("bslib", "cpp11", "dbplyr", "gargle", "gert", "googledrive", "googlesheets4", "htmltools", "KernSmooth", "leaflet.providers", "lme4", "magick", "Matrix", "MatrixModels", "mgcv", "nlme", "plotly", "promises", "purrr", "quantreg", "raster", "renv", "rsconnect", "sf", "tinytex", "units", "V8", "xfun"))
?dependson
dependsOnPkgs("terra")
tools::dependsOnPkgs("terra")
remove.packages("raster", "satellite", "leafem", "leaflet", "mapview")
remove.packages(c("raster", "satellite", "leafem", "leaflet", "mapview"))
install.packages(c("bslib", "cpp11", "dbplyr", "gargle", "gert", "googledrive", "googlesheets4", "htmltools", "KernSmooth", "leaflet.providers", "lme4", "magick", "Matrix", "MatrixModels", "mgcv", "nlme", "plotly", "promises", "purrr", "quantreg", "renv", "rsconnect", "sf", "tinytex", "units", "V8", "xfun"))
test_that("chisq works with specifying observed", {
# skip("superseded?")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
devtools::load_all(".")
library(devtools)
test_that("chisq works with specifying observed", {
# skip("superseded?")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
infer_anova(mtcars, cyl~gear
infer_anova(mtcars, cyl~gear)
infer_anova(mtcars, cyl~gear, digits = 4)
devtools::load_all(".")
?infer_anova
build_site
build_site()
build_readme()
build_readme()
devtools::load_all(".")
build_readme()
build_readme()
build_readme()
png(plot_bar(mtcars, ~cyl))
?png
getwd()
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
num_sum(mtcars, ~wt, na_rm = TRUE) %>%flextable::bg(bg = "white") %>% flextable::save_as_image("man/figures/num_sum.png")
num_sum(mtcars, ~wt, na_rm = TRUE) %>%flextable::bg(bg = "white", part = "all") %>% flextable::save_as_image("man/figures/num_sum.png")
infer_mean2_int(mtcars, wt~vs) %>% flextable::bg(bg = "white", part = "all") %>% flextable::save_as_image("man/figures/num_sum.png")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
pctile(mtcars, ~wt, probs = c(0, .25, .4, .5, .6, .75, 1)) %>% flextable::save_as_image("man/figures/pctile.png")
infer_prop1(mtcars, ~vs, success = 1) %>% flextable::save_as_image("man/figures/infer_prop1.png")
infer_paired(mtcars, var1 = ~drat, var2 = ~wt) %>% flextable::save_as_image("man/figures/infer_paired.png")
infer_mean2_int(mtcars, wt~vs) %>% flextable::save_as_image("man/figures/infer_mean2_int.png")
infer_chisq(mtcars, cyl~gear) %>% flextable::save_as_image("man/figures/infer_chisq.png")
infer_chisq(mtcars, cyl~gear, type = "expected") %>% flextable::save_as_image("man/figures/infer_chisq_expected.png")
infer_anova(mtcars, cyl~gear, digits = 2) %>% flextable::save_as_image("man/figures/infer_anova.png")
?theme_zebra
infer_anova(mtcars, cyl~gear, digits = 2) %>% flextable::save_as_image("man/figures/infer_anova.png")
devtools::load_all(".")
infer_chisq(mtcars, cyl~gear, type = "expected") %>% flextable::save_as_image("man/figures/infer_chisq_expected.png")
infer_chisq(mtcars, cyl~gear) %>% flextable::save_as_image("man/figures/infer_chisq.png")
infer_mean2_int(mtcars, wt~vs) %>% flextable::save_as_image("man/figures/infer_mean2_int.png")
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs) %>% flextable::save_as_image("man/figures/infer_mean2_int.png")
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs) %>% flextable::save_as_image("man/figures/infer_mean2_int.png")
infer_paired(mtcars, var1 = ~drat, var2 = ~wt) %>% flextable::save_as_image("man/figures/infer_paired.png")
infer_prop1(mtcars, ~vs, success = 1) %>% flextable::save_as_image("man/figures/infer_prop1.png")
pctile(mtcars, ~wt, probs = c(0, .25, .4, .5, .6, .75, 1)) %>% flextable::save_as_image("man/figures/pctile.png")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
devtools::load_all(".")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
devtools::load_all(".")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
devtools::load_all(".")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
?fp_text
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
devtools::load_all(".")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
infer_chisq(mtcars, cyl~gear, type = "expected") %>% flextable::save_as_image("man/figures/num_sum.png")
?theme_zebra
devtools::load_all(".")
infer_chisq(mtcars, cyl~gear, type = "expected") %>% flextable::save_as_image("man/figures/num_sum.png")
infer_chisq(mtcars, cyl~gear, type = "expected") %>% flextable::save_as_image("man/figures/infer_chisq_expected.png")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
infer_anova(mtcars, cyl~gear, digits = 2) %>% flextable::save_as_image("man/figures/infer_anova.png\")
infer_anova(mtcars, cyl~gear, digits = 2) %>% flextable::save_as_image("man/figures/infer_anova.png")
build_readme()
devtools::load_all(".")
build_readme()
plot_bar(mtcars, ~cyl, type = "percent")
plot_box(mtcars, wt~gear, fill = 'orangered4', x = "Gear", y = "Weight", title = "Boxplot of Weight by Gear")
plot_scatter(mtcars, wt~drat)
build_readme()
?use_version
use_version()
use_version()
use_version()
