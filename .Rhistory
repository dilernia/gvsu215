expect_error(corr(mtcars, Wt~qsec, na_rm = TRUE))
})
corr(mtcars, Wt~qsec, na_rm = TRUE)
test_active_file()
use_test()
devtools::load_all(".")
plot_bar(mtcars, ~cyl)
expect_no_condition(plot_bar(mtcars, ~cyl))
test_that("bar works regularly", {
expect_message(plot_bar(mtcars, ~cyl))
})
test_that("bar works regularly with type = percent", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "percent"))
})
build_readme()
test_that("bar works regularly with removing NAs", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "percent", na_rm = TRUE))
})
test_that("bar fails with neither percent nor count", {
expect_error(plot_bar(mtcars, ~cyl, type = "idk"))
})
test_that("bar fails with neither percent nor count", {
expect_error(plot_bar(mtcars, ~cyl, type = "idk"))
})
test_that("bar fails with mispelling data", {
expect_error(plot_bar(MTCARS, ~Cyl, type = "count"))
})
test_that("bar fails with mispelling", {
expect_error(plot_bar(mtcars, ~Cyl, type = "count"))
})
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
?factor
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
dplyr::mutate(mtcars, gear = factor(gear))
dplyr::mutate(mtcars, gear = factor("gear"))
source("~/Documents/coding/gvsu215/tests/testthat/test-plots.R", echo=TRUE)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
test_that("bar gives message with no type given", {
expect_message(plot_bar(mtcars, ~cyl, fill = ~gear))
})
test_active_file()
test_active_file()
plot_box(mtcars, ~wt)
test_that("bar works with change title", {
expect_no_condition(plot_bar(mtcars, ~cyl, title = "hehe"))
})
test_that("bar works with change title", {
expect_no_condition(plot_bar(mtcars, ~cyl, title = "hehe", type = "percent"))
})
plot_box(mtcars, wt~gear)
plot_box(mtcars, gear~wt)
devtools::load_all(".")
plot_box(mtcars, gear~wt)
plot_box(mtcars, wt~gear)
devtools::load_all(".")
plot_box(mtcars, ~wt)
plot_box(mtcars, wt~gear)
devtools::load_all(".")
plot_box(mtcars, wt~gear)
plot_box(mtcars, wt~gear, fill = 'orangered4')
plot_box(mtcars, wt~gear, x = "yay")
test_that("bar works with label change", {
expect_no_condition(plot_box(mtcars, wt~gear, x = "yay", y = "yay"))
})
plot_box(mtcars, wt~gear, x = "yay", y = "yay")
test_that("group boxplot fails with mispelling", {
expect_no_condition(plot_box(mtcars, Wt~gear))
})
test_that("group boxplot fails with mispelling", {
expect_error(plot_box(mtcars, Wt~gear))
})
plot_box(mtcars, wt~gear, title = 2)
test_that("boxplot works normally with label changes", {
expect_no_condition(plot_box(mtcars, wt~gear, x = "yay", y = "hehe"))
})
test_that("boxplot works with swapping order", {
expect_no_condition(plot_box(Mtcars, gear~wt))
})
test_that("boxplot works with swapping order", {
expect_no_condition(plot_box(mtcars, gear~wt))
})
test_that("bar works with new fill color", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "percent", fill = "yellowgreen"))
})
plot_bar(mtcars, ~cyl, type = "percent", fill = "yellowgreen")
devtools::load_all(".")
plot_bar(mtcars, ~cyl, type = "percent", fill = "yellowgreen")
plot_hist(mtcars, ~wt, breaks = c(0, 5, 1))
plot_hist(mtcars, ~wt, breaks = c(0, 30, 2))
plot_hist(mtcars, ~wt, breaks = c(0, 30)
plot_hist(mtcars, ~wt)
plot_hist(mtcars, ~wt)
plot_hist(mtcars, ~qsec)
plot_hist(mtcars, ~drat)
?gf_histogram
?geom_histogram
plot_hist(mtcars, ~drat, breaks = c(1, 5, 5)
plot_hist(mtcars, ~drat, breaks = c(1, 5, 5))
plot_hist(mtcars, ~drat, breaks = c(1, 5))
plot_hist(mtcars, ~drat, breaks = 10)
plot_hist(mtcars, ~drat, breaks = c(0, 10, 3))
min(mtcars$drat)
max(mtcars$drat)
plot_hist(mtcars, ~drat, breaks = c(0, 5, 0.5))
plot_hist(mtcars, ~drat, breaks = c(0, 5, 5))
plot_hist(mtcars, ~drat, breaks = c(0, 5))
plot_hist(mtcars, ~drat, breaks = c(0, 5, 3))
plot_hist(mtcars, ~drat, breaks = c(.2))
plot_hist(mtcars, ~drat, breaks = c(.2, 4))
plot_hist(mtcars, ~drat, breaks = c(0, 5, .5))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, .5)))
lot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 2)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 2)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 5)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 1)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 10, 1)))
devtools::load_all(".")
test_that("histogram works", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.5)
})
test_that("histogram works", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.5))
})
plot_hist(mtcars, ~drat, binwidth = 0.5)
plot_hist(mtcars, ~drat, binwidth = 0.05)
test_that("histogram warns with no binwidth", {
expect_warning(plot_hist(mtcars, ~drat))
})
test_that("histogram works with new fill", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.05, fill = "#183590"))
})
?'('
?'$'
$
'$'
test_that("histogram fails with mispelling", {
expect_error(plot_hist(mtcars, ~Drat, binwidth = 0.05))
})
plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl)
devtools::load_all(".")
test_that("group histogram works", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl))
})
plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl)
test_that("histogram works with different columns", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl, facet_cols = 2))
})
devtools::load_all(".")
test_that("histogram fails with many vars in formula", {
expect_error(plot_hist(mtcars, drat~cyl, binwidth = 0.05))
})
test_that("grouped histogram fails with mispelling", {
expect_error(plot_hist(Mtcars, ~drat, binwidth = 0.05))
})
test_active_file()
devtools::load_all(".")
test_active_file()
plot_box(mtcars, ~wt, na_rm = TRUE)
devtools::load_all(".")
plot_box(mtcars, ~wt, na_rm = TRUE)
library(devtools)
plot_box(mtcars, ~wt, na_rm = TRUE)
test_active_file()
test_that("boxplot works with removing NAs", {
expect_no_error(plot_box(mtcars, ~wt, na_rm = TRUE))
})
test_active_file()
test_active_file()
devtools::load_all(".")
test_active_file()
plot_box(mtcars, ~wt, na_rm = TRUE)
plot_scatter(mtcars, wt~drat)
test_that("scatter works", {
expect_warning(plot_scatter(mtcars, wt~drat))
})
test_that("scatter works", {
expect_message(plot_scatter(mtcars, wt~drat))
})
test_that("scatter works with new fill color", {
expect_message(plot_scatter(mtcars, wt~drat, fill = "#49208a"))
})
plot_scatter(mtcars, wt~drat, x = "yaya", y = "ayay"
plot_scatter(mtcars, wt~drat, x = "yaya", y = "ayay")
plot_scatter(mtcars, wt~drat, axis_lines = "both")
test_that("scatter works with both lines", {
expect_message(plot_scatter(mtcars, wt~drat, axis_lines = "both"))
})
plot_scatter(mtcars, wt~drat, fill = ~cyl)
test_that("scatter works with new legend title", {
expect_message(plot_scatter(mtcars, wt~drat, legend_title = "Cyl"))
})
plot_scatter(mtcars, wt~drat, legend_title = "Cyl")
fill = ~cyl, legend_title = "Cyl"
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
test_that("scatter warns with fill string and legend title", {
expect_warning(plot_scatter(mtcars, wt~drat, legend_title = "Hey!"))
})
test_that("group scatter works with axis lines", {
expect_message(plot_scatter(mtcars, wt~drat, fill = ~cyl, axis_lines = "both"))
})
test_active_file()
source("~/Documents/coding/gvsu215/R/plots.R", echo=TRUE)
library(devtools)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
devtools::load_all(".")
test_active_file()
build_readme()
use_test()
package_version("1.3.dev")
package_version("1.3.1.8888")
devtools::load_all(".")
infer_prop1(mtcars, ~vs, success = 1)
test_that("infer prop 1 works with digits", {
expect_no_condition(infer_prop1(mtcars, ~vs, success = 1, digits = 4))
})
test_active_file()
test_active_file()
test_active_file()
infer_prop2_int(mtcars, vs~am, success = 1)
test_active_file()
infer_mean1(mtcars, ~weight, success = 1)
infer_mean1(mtcars, ~weight)
infer_mean1(mtcars, ~wt)
infer_mean1(mtcars ~wt, conf_lvl = "90%")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
test_active_file()
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
source("~/Documents/coding/gvsu215/R/inference.R", echo=TRUE)
library(devtools)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
levels(factor(mtcars$vs))
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
?levels
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
use_test()
infer_mean2_int(mtcars, wt~vs)
levels(mtcars, vs)
levels(mtcars)
levels(mtcars$vs)
levels(factor(mtcars$vs))
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
mtcars[vs]
mtcars[[vs]]
mtcars[,vs]
mtcars[["vs"]]
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
length(levels(mtcars[["vs"]]))
typeof(levels(mtcars[["vs"]]))
levels(mtcars[["vs"]])
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
test_active_file()
infer_paired(mtcars, var1 = drat, var2 = wt)
mosaic::t_test(x = drat, y = wt, data = mtcars, paired = TRUE)
?t_test
test_that("paired works", {
expect_no_condition(infer_paired(mtcars, var1 = ~drat, var2 = ~wt))
})
mosaic::t_test(x = ~drat, y = ~wt, data = mtcars, paired = TRUE)
?Pair
devtools::load_all(".")
test_that("paired works", {
expect_no_condition(infer_paired(mtcars, var1 = ~drat, var2 = ~wt))
})
infer_paired(mtcars, var1 = ~drat, var2 = ~wt)
devtools::load_all(".")
test_active_file()
test_active_file()
remove.packages("spatial")
remove.packages("terra")
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
?test_that
install.packages(testthat)
install.packages('testthat')
install.packages("tidyverse")
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
library(devtools)
test_active_file()
infer_chisq(mtcars, cyl~gear, type = "observed")
infer_chisq(mtcars, cyl~gear, type = "observed")
test_that("chisq works with specifying observed", {
expect_warning(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
expect_message(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
expect_defunct(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
lifecycle::expect_defunct(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
withr::local_options(lifecycle_verbosity = "quiet")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
withr::local_options(lifecycle_verbosity = "quiet")
test_that("chisq works with specifying observed", {
withr::local_options(lifecycle_verbosity = "quiet")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
withr::local_options(lifecycle_verbosity = "quiet")
lifecycle::expect_deprecated(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
lifecycle::expect_deprecated(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
rlang::local_options(lifecycle_verbosity = "quiet")
lifecycle::expect_deprecated(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
test_that("chisq works with specifying observed", {
rlang::local_options(lifecycle_verbosity = "quiet")
expect_no_condition(
suppressWarnings(infer_chisq(mtcars, cyl~gear, type = "observed"))
)
})
update.packages("janitor")
test_active_file()
test_active_file()
test_active_file()
infer_anova(mtcars, cyl~gear)
test_that("anova works", {
expect_no_condition(infer_anova(mtcars, cyl~gear))
})
infer_anova(mtcars, cyl~gear)
expect_no_condition(infer_anova(mtcars, cyl~gear))
update.packages("broom")
infer_chisq(mtcars, cyl~cyl)
test_active_file()
infer_anova(mtcars, cyl~cyl)
devtools::load_all(".")
infer_anova(mtcars, cyl~cyl)
test_that("anova warns with same var", {
expect_warning(infer_anova(mtcars, cyl~cyl))
})
test_that("anova warns with same var", {
expect_error(infer_anova(mtcars, cyl~cyl))
})
test_that("anova warns with same var", {
expect_error(infer_anova(mtcars, cyl~cyl))
})
test_active_file()
test_that("anova warns with same var", {
expect_condition(infer_anova(mtcars, cyl~cyl))
})
?capture_warnings
test_that("anova warns with same var", {
expect_error(supressWarnings(infer_anova(mtcars, cyl~cyl)))
})
infer_anova(mtcars, cyl~cyl)
test_that("anova warns with same var", {
# skip("superceded?")
expect_error(suppressWarnings(infer_anova(mtcars, cyl~cyl)))
})
test_that("anova works", {
skip("superceded?")
expect_no_condition(infer_anova(mtcars, cyl~gear))
})
test_that("anova works", {
# skip("superceded?")
expect_no_condition(infer_anova(mtcars, cyl~gear))
})
test_that("anova works", {
# skip("superceded?")
expect_no_condition(suppressWarnings(infer_anova(mtcars, cyl~gear)))
})
devtools::load_all(".")
test_active_file()
?gf_point
find_na(mtcars, ~cyl)
find_na(mtcars, wt~cyl)
find_na(mtcars, wt~cyl, n = 2)
?lm
check_test(lm(wt~drat, data = mtcars))
check_test(lm(Wt~drat, data = mtcars))
devtools::load_all(".")
?favstqats
?favstats
devtools::load_all(".")
?num_sum
?`::`
?`:=`
expect_warning(pctile(mtcars, ~wt))
pctile(mtcars, ~wt, na_rm = TRUE)
pctile(mtcars, ~wt)
try(pctile(mtcars, ~wt, probs = c(25, 50, 75, 100)))
?pctile
num_sum(mtcars, ~wt)
?pctile
pkgdown::build_site()
plot_bar(mtcars, ~cyl, fill = ~gear)
test_that("bar fails with long formula", {
expect_error(plot_bar(mtcars, cyl~gear, type = "count"))
})
plot_box(mtcars, ~wt)
plot_box(mtcars, gear~wt)
plot_hist(mtcars, ~drat)
