usethis::use_package_doc()
usethis::use_import_from("magrittr", "%>%")
?use_import_from
usethis::use_tidy_description()
usethis::use_package("flextable", min_version = TRUE)
usethis::use_package("ggformula", min_version = TRUE)
usethis::use_package("magrittr", min_version = TRUE)
usethis::use_package("mosaic", min_version = TRUE)
usethis::use_version()
usethis::use_lifecycle()
library(devtools)
dev_sitrep()
install_dev_deps()
update_packages("devtools")
use_package("lifecycle", min_version = TRUE)
?str_detect
?str_extract
stringr::str_view("red", "r")
stringr::str_view("red", "a")
stringr::str_view("hey yeah!", "a")
stringr::str_view("hey yeah!", " ")
?mutate
use_pkgdown_github_pages()
use_testthat(3)
use_news_md()
use_cran_comments()
devtools::load_all(".")
?across
?stop
?use_package
use_package("dplyr", min_version = TRUE)
use_package("ggplot2", min_version = TRUE)
use_package("janitor", min_version = TRUE)
use_package("officer", min_version = TRUE)
use_package("tibble", min_version = TRUE)
use_package("tidyr", min_version = TRUE)
?mutate
?tally
typeof(test)
devtools::load_all(".")
two_way(mtcars, cyl~gear)
mosaic::tally(cyl~gear, data = mtcars)
devtools::load_all(".")
two_way(mtcars, cyl~gear)
two_way(mtcars, cyl~gear, row_pct = TRUE)
devtools::load_all(".")
?one_way
?two_way
use_readme_rmd()
use_test("one_way")
mtcars %>% finalize_tbl()
mtcars %>% finalize_tbl(digits = 3)
finalize_tbl(mtcars, digits = 3, caption = "The mtcars Dataset")
devtools::load_all(".")
one_way(mtcars, ~gear, caption = "hehe")
two_way(mtcars, cyl~gear, caption = "hehe")
test_active_file()
testthat::test_file("tests/testthat/test_tables.R")
testthat::test_file("tests/testthat/test_tables.R")
testthat::test_file("tests/testthat/test_tables.R")
testthat::test_file("tests/testthat/test_tables.R")
check()
devtools::load_all(".")
use_test("summaries")
num_sum(mtcars, ~wt)
num_sum(mtcars, ~wt, na_rm = TRUE)
num_sum(mtcars, wt~cyl, na_rm = TRUE)
num_sum(mtcars, Wt~Cyl, na_rm = TRUE, digits = 2)
rlang::last_trace()
test_active_file()
devtools::load_all(".")
test_active_file()
num_sum(mtcars, ~WT, na_rm = TRUE, digits = 2)
test_active_file()
pctile(mtcars, ~wt)
test_that("pctile displays message when NAs are not removed", {
expect_warning(pctile(mtcars, ~wt))
})
pctile(mtcars, ~wt)
test_that("pctile displays works when NAs are removed", {
expect_no_condition(pctile(mtcars, ~wt, na_rm = TRUE))
})
pctile(mtcars, wt~cyl, na_rm = TRUE)
pctile(mtcars, ~cyl, probs = c(0))
pctile(mtcars, ~cyl, probs = c(-1))
c(2, 4, 5) > 1
?between
between(c(.4, 0, 1), 0, 1)
between(c(.4, 0, 90), 0, 1)
FALSE %in% c(TRUE, TRUE, FALSE)
?stop
pctile(mtcars, ~cyl, probs = c(-1))
devtools::load_all(".")
pctile(mtcars, ~cyl, probs = c(-1))
test_that("pctile fails with invalid probs", {
expect_error(pctile(mtcars, ~cyl, probs = c(-1, 5)))
})
test_that("corr warns with NAs not removed", {
expect_warning(corr(mtcars, wt~qsec))
})
test_that("corr works with NAs removed", {
expect_no_condition(corr(mtcars, wt~qsec, na_rm = TRUE))
})
test_that("corr fails with mispelling", {
expect_error(corr(mtcars, Wt~qsec))
})
test_that("corr fails with mispelling", {
expect_error(corr(mtcars, Wt~qsec))
})
test_that("corr fails with mispelling", {
expect_error(corr(mtcars, Wt~qsec, na_rm = TRUE))
})
devtools::load_all(".")
test_that("corr fails with mispelling", {
expect_error(corr(mtcars, Wt~qsec, na_rm = TRUE))
})
corr(mtcars, Wt~qsec, na_rm = TRUE)
test_active_file()
use_test()
devtools::load_all(".")
plot_bar(mtcars, ~cyl)
expect_no_condition(plot_bar(mtcars, ~cyl))
test_that("bar works regularly", {
expect_message(plot_bar(mtcars, ~cyl))
})
test_that("bar works regularly with type = percent", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "percent"))
})
build_readme()
test_that("bar works regularly with removing NAs", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "percent", na_rm = TRUE))
})
test_that("bar fails with neither percent nor count", {
expect_error(plot_bar(mtcars, ~cyl, type = "idk"))
})
test_that("bar fails with neither percent nor count", {
expect_error(plot_bar(mtcars, ~cyl, type = "idk"))
})
test_that("bar fails with mispelling data", {
expect_error(plot_bar(MTCARS, ~Cyl, type = "count"))
})
test_that("bar fails with mispelling", {
expect_error(plot_bar(mtcars, ~Cyl, type = "count"))
})
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
?factor
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
dplyr::mutate(mtcars, gear = factor(gear))
dplyr::mutate(mtcars, gear = factor("gear"))
source("~/Documents/coding/gvsu215/tests/testthat/test-plots.R", echo=TRUE)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
devtools::load_all(".")
plot_bar(mtcars, ~cyl, fill = ~gear)
test_that("bar gives message with no type given", {
expect_message(plot_bar(mtcars, ~cyl, fill = ~gear))
})
test_active_file()
test_active_file()
plot_box(mtcars, ~wt)
test_that("bar works with change title", {
expect_no_condition(plot_bar(mtcars, ~cyl, title = "hehe"))
})
test_that("bar works with change title", {
expect_no_condition(plot_bar(mtcars, ~cyl, title = "hehe", type = "percent"))
})
plot_box(mtcars, wt~gear)
plot_box(mtcars, gear~wt)
devtools::load_all(".")
plot_box(mtcars, gear~wt)
plot_box(mtcars, wt~gear)
devtools::load_all(".")
plot_box(mtcars, ~wt)
plot_box(mtcars, wt~gear)
devtools::load_all(".")
plot_box(mtcars, wt~gear)
plot_box(mtcars, wt~gear, fill = 'orangered4')
plot_box(mtcars, wt~gear, x = "yay")
test_that("bar works with label change", {
expect_no_condition(plot_box(mtcars, wt~gear, x = "yay", y = "yay"))
})
plot_box(mtcars, wt~gear, x = "yay", y = "yay")
test_that("group boxplot fails with mispelling", {
expect_no_condition(plot_box(mtcars, Wt~gear))
})
test_that("group boxplot fails with mispelling", {
expect_error(plot_box(mtcars, Wt~gear))
})
plot_box(mtcars, wt~gear, title = 2)
test_that("boxplot works normally with label changes", {
expect_no_condition(plot_box(mtcars, wt~gear, x = "yay", y = "hehe"))
})
test_that("boxplot works with swapping order", {
expect_no_condition(plot_box(Mtcars, gear~wt))
})
test_that("boxplot works with swapping order", {
expect_no_condition(plot_box(mtcars, gear~wt))
})
test_that("bar works with new fill color", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "percent", fill = "yellowgreen"))
})
plot_bar(mtcars, ~cyl, type = "percent", fill = "yellowgreen")
devtools::load_all(".")
plot_bar(mtcars, ~cyl, type = "percent", fill = "yellowgreen")
plot_hist(mtcars, ~wt, breaks = c(0, 5, 1))
plot_hist(mtcars, ~wt, breaks = c(0, 30, 2))
plot_hist(mtcars, ~wt, breaks = c(0, 30)
plot_hist(mtcars, ~wt)
plot_hist(mtcars, ~wt)
plot_hist(mtcars, ~qsec)
plot_hist(mtcars, ~drat)
?gf_histogram
?geom_histogram
plot_hist(mtcars, ~drat, breaks = c(1, 5, 5)
plot_hist(mtcars, ~drat, breaks = c(1, 5, 5))
plot_hist(mtcars, ~drat, breaks = c(1, 5))
plot_hist(mtcars, ~drat, breaks = 10)
plot_hist(mtcars, ~drat, breaks = c(0, 10, 3))
min(mtcars$drat)
max(mtcars$drat)
plot_hist(mtcars, ~drat, breaks = c(0, 5, 0.5))
plot_hist(mtcars, ~drat, breaks = c(0, 5, 5))
plot_hist(mtcars, ~drat, breaks = c(0, 5))
plot_hist(mtcars, ~drat, breaks = c(0, 5, 3))
plot_hist(mtcars, ~drat, breaks = c(.2))
plot_hist(mtcars, ~drat, breaks = c(.2, 4))
plot_hist(mtcars, ~drat, breaks = c(0, 5, .5))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, .5)))
lot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 2)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 2)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 5)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 5, 1)))
plot_hist(mtcars, ~drat, breaks = seq(c(0, 10, 1)))
devtools::load_all(".")
test_that("histogram works", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.5)
})
test_that("histogram works", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.5))
})
plot_hist(mtcars, ~drat, binwidth = 0.5)
plot_hist(mtcars, ~drat, binwidth = 0.05)
test_that("histogram warns with no binwidth", {
expect_warning(plot_hist(mtcars, ~drat))
})
test_that("histogram works with new fill", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.05, fill = "#183590"))
})
?'('
?'$'
$
'$'
test_that("histogram fails with mispelling", {
expect_error(plot_hist(mtcars, ~Drat, binwidth = 0.05))
})
plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl)
devtools::load_all(".")
test_that("group histogram works", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl))
})
plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl)
test_that("histogram works with different columns", {
expect_no_condition(plot_hist(mtcars, ~drat, binwidth = 0.05, facet = ~cyl, facet_cols = 2))
})
devtools::load_all(".")
test_that("histogram fails with many vars in formula", {
expect_error(plot_hist(mtcars, drat~cyl, binwidth = 0.05))
})
test_that("grouped histogram fails with mispelling", {
expect_error(plot_hist(Mtcars, ~drat, binwidth = 0.05))
})
test_active_file()
devtools::load_all(".")
test_active_file()
plot_box(mtcars, ~wt, na_rm = TRUE)
devtools::load_all(".")
plot_box(mtcars, ~wt, na_rm = TRUE)
library(devtools)
plot_box(mtcars, ~wt, na_rm = TRUE)
test_active_file()
test_that("boxplot works with removing NAs", {
expect_no_error(plot_box(mtcars, ~wt, na_rm = TRUE))
})
test_active_file()
test_active_file()
devtools::load_all(".")
test_active_file()
plot_box(mtcars, ~wt, na_rm = TRUE)
plot_scatter(mtcars, wt~drat)
test_that("scatter works", {
expect_warning(plot_scatter(mtcars, wt~drat))
})
test_that("scatter works", {
expect_message(plot_scatter(mtcars, wt~drat))
})
test_that("scatter works with new fill color", {
expect_message(plot_scatter(mtcars, wt~drat, fill = "#49208a"))
})
plot_scatter(mtcars, wt~drat, x = "yaya", y = "ayay"
plot_scatter(mtcars, wt~drat, x = "yaya", y = "ayay")
plot_scatter(mtcars, wt~drat, axis_lines = "both")
test_that("scatter works with both lines", {
expect_message(plot_scatter(mtcars, wt~drat, axis_lines = "both"))
})
plot_scatter(mtcars, wt~drat, fill = ~cyl)
test_that("scatter works with new legend title", {
expect_message(plot_scatter(mtcars, wt~drat, legend_title = "Cyl"))
})
plot_scatter(mtcars, wt~drat, legend_title = "Cyl")
fill = ~cyl, legend_title = "Cyl"
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
test_that("scatter warns with fill string and legend title", {
expect_warning(plot_scatter(mtcars, wt~drat, legend_title = "Hey!"))
})
test_that("group scatter works with axis lines", {
expect_message(plot_scatter(mtcars, wt~drat, fill = ~cyl, axis_lines = "both"))
})
test_active_file()
source("~/Documents/coding/gvsu215/R/plots.R", echo=TRUE)
library(devtools)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
devtools::load_all(".")
test_active_file()
build_readme()
use_test()
package_version("1.3.dev")
package_version("1.3.1.8888")
devtools::load_all(".")
infer_prop1(mtcars, ~vs, success = 1)
test_that("infer prop 1 works with digits", {
expect_no_condition(infer_prop1(mtcars, ~vs, success = 1, digits = 4))
})
test_active_file()
test_active_file()
test_active_file()
infer_prop2_int(mtcars, vs~am, success = 1)
test_active_file()
infer_mean1(mtcars, ~weight, success = 1)
infer_mean1(mtcars, ~weight)
infer_mean1(mtcars, ~wt)
infer_mean1(mtcars ~wt, conf_lvl = "90%")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
test_active_file()
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
source("~/Documents/coding/gvsu215/R/inference.R", echo=TRUE)
library(devtools)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
levels(factor(mtcars$vs))
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
?levels
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
use_test()
infer_mean2_int(mtcars, wt~vs)
levels(mtcars, vs)
levels(mtcars)
levels(mtcars$vs)
levels(factor(mtcars$vs))
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
mtcars[vs]
mtcars[[vs]]
mtcars[,vs]
mtcars[["vs"]]
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
length(levels(mtcars[["vs"]]))
typeof(levels(mtcars[["vs"]]))
levels(mtcars[["vs"]])
devtools::load_all(".")
infer_mean2_int(mtcars, wt~vs)
test_active_file()
infer_paired(mtcars, var1 = drat, var2 = wt)
mosaic::t_test(x = drat, y = wt, data = mtcars, paired = TRUE)
?t_test
test_that("paired works", {
expect_no_condition(infer_paired(mtcars, var1 = ~drat, var2 = ~wt))
})
mosaic::t_test(x = ~drat, y = ~wt, data = mtcars, paired = TRUE)
?Pair
devtools::load_all(".")
test_that("paired works", {
expect_no_condition(infer_paired(mtcars, var1 = ~drat, var2 = ~wt))
})
infer_paired(mtcars, var1 = ~drat, var2 = ~wt)
devtools::load_all(".")
test_active_file()
test_active_file()
