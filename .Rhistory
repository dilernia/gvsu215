infer_prop2_int(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
devtools::load_all(".")
infer_prop2_int(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
devtools::load_all(".")
devtools::load_all(".")
infer_prop2_int(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
EyeColor %>% filter(Gender == "female")
EyeColor %>% filter(Gender == "female" & is.na(Gender))
EyeColor %>% filter(Gender == "male" & is.na(Gender))
devtools::load_all(".")
infer_prop2_int(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
devtools::load_all(".")
infer_prop2_int(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
infer_prop2_test(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
devtools::load_all(".")
infer_prop2_test(data = EyeColor, formula = EyeColor ~ Gender, success = "blue")
RoundGoby <- readr::read_csv("temp/RoundGoby.csv")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
RoundGoby %>% group_by(species2) %>% summarise(mean = mean(BD))
devtools::load_all(".")
infer_mean2_int(data = RoundGoby, formula = BD ~ species2)
devtools::load_all(".")
infer_mean2_test(data = RoundGoby, formula = BD ~ species2)
use_test()
infer_prop2_int(mtcars, vs~am, success = 1)
devtools::load_all(".")
infer_prop2_int(mtcars, vs~am, success = 1)
infer_prop2_int(EyeColor, EyeColor~Gender, success = "blue")
infer_prop2_int(mtcars, vs~am, success = 1, digits = 4)
infer_prop2_test(mtcars, vs~am, success = 1)
devtools::load_all(".")
infer_prop2_test(mtcars, vs~am, success = 1)
infer_mean2_int(mtcars, wt~vs)
infer_paired(mtcars, var1 = ~drat, var2 = ~wt)
infer_mean2_test(mtcars, wt~vs)
infer_prop2_test(mtcars, vs~am, success = 1)
use_version(which = "minor")
check()
showNonASCIIfile("R/summaries.R")
tools::showNonASCIIfile("R/summaries.R")
"\u2081"
"n\u2081"
"n\u2081 missing"
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_that("one way fails with mispelling", {
expect_error(tbl_one(mtcars, ~Gear))
})
test_active_file()
test_active_file()
test_active_file()
check()
plot_bar(mtcars, ~cyl)
use_package("broom", min_version = TRUE)
library(devtools)
check()
?`:=`
use_import_from("data.table", ":=")
check()
use_test()
devtools::load_all(".")
infer_chisq(mtcars, cyl~gear, type = "test")
check()
devtools::load_all(".")
use_test()
infer_prop1(mtcars, ~vs, success = 1)
use_test()
check()
install.packages("checkhelper")
?checkhelper::print_globals
checkhelper::print_globals()
checkhelper::print_globals(quiet = TRUE)
check()
plot_bar(mtcars, ~cyl)
build_readme()
install.packages("webshot2")
build_readme()
?webshot2::webshot2
remove.packages("webshot2")
install.packages("webshot")
webshot::is_phantomjs_installed()
build_readme()
?render
build_readme()
build_readme()
remove.packages("webshot")
install.packages("webshot2")
install.packages("webshot2")
library(devtools)
?render
??render
build_readme()
?webshot2
??webshot2
check_win_devel()
?build_readme
pkgload::dev_help('gvsu215-package')
pkgload::load_all()
pkgload::dev_help('gvsu215-package')
?tempfile
?tempfile()
library(devtools)
?unlink*()
?unlink*()
?unlink()
build_readme()
devtools::load_all(".")
num_sum(mtcars, ~wt, na_rm = TRUE)
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("test.png")
build_readme()
build_readme()
build_readme()
install.packages(c("chromote", "httr", "Matrix", "patchwork", "proj4", "renv", "rsconnect", "survival", "uuid"))
library(devtools)
build_readme()
devtools::load_all(".")
two_way(mtcars, gear~cyl)
tbl_two(mtcars, gear~cyl)
use_test()
tbl_two(mtcars, gear~cyl) %>% flextable::save_as_image("man/figures/tbl_two.png")
num_sum(mtcars, ~wt, na_rm = TRUE) %>% flextable::save_as_image("man/figures/num_sum.png")
pctile(mtcars, ~wt, probs = c(0, .25, .4, .5, .6, .75, 1)) %>% flextable::save_as_image("man/figures/pctile.png")
infer_1prop(mtcars, ~vs, success = 1) %>% flextable::save_as_image("man/figures/infer_1prop.png")
devtools::load_all(".")
infer_1prop(mtcars, ~vs, success = 1) %>% flextable::save_as_image("man/figures/infer_1prop.png")
infer_paired(mtcars, var1 = ~drat, var2 = ~wt) %>% flextable::save_as_image("man/figures/infer_paired.png")
infer_2mean_int(mtcars, wt~vs) %>% flextable::save_as_image("man/figures/infer_2mean_int.png")
infer_chisq(mtcars, cyl~gear) %>% flextable::save_as_image("man/figures/infer_chisq.png")
infer_chisq(mtcars, cyl~gear, type = "expected") %>% flextable::save_as_image("man/figures/infer_chisq_expected.png")
infer_anova(mtcars, cyl~gear, digits = 2) %>% flextable::save_as_image("man/figures/infer_anova.png")
build_readme()
devtools::load_all(".")
build_readme()
infer_1prop(mtcars, ~vs, success = 1)
devtools::load_all(".")
test_active_file()
build_readme()
build_readme()
build_readme()
mtcars %>% dplyr::select(cyl, gear) %>% flextable::flextable()
head(mtcars) %>% dplyr::select(cyl, gear) %>% flextable::flextable()
use_test()
use_test()
test_active_file()
devtools::load_all(".")
test_active_file()
devtools::load_all(".")
test_active_file()
test_active_file()
use_test()
test_active_file()
* Many functions have changed names (the old names are not available). These functions are:
Executions <- readr::read_csv("temp/Executions.csv")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE)
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE)
use_test()
library(devtools)
use_test()
test_that("bar works with type = count", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "count"))
})
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE)
?gf_percents
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE)
Executions %>% filter(is.na(Method))
find_na(Executions, ~Method)
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE)
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE)
Exeuctions %>% group_by(Method) %>% summarise(n = n())
Executions %>% group_by(Method) %>% summarise(n = n())
test_that("bar works with type = count", {
expect_no_condition(plot_bar(mtcars, ~cyl, type = "count"))
})
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE, fill = ~Sex)
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE, fill = ~Sex)
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE, fill = ~Sex)
devtools::load_all(".")
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE, fill = ~Sex)
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = FALSE, fill = ~Race)
plot_bar(data = Executions,  formula = ~Method,  type = "count",
na_rm = TRUE, fill = ~Race)
plot_bar(data = Executions,  formula = ~Method,  type = "percent",
na_rm = TRUE)
plot_bar(data = Executions,  formula = ~Method,  type = "percent",
na_rm = FALSE)
tbl_2var(data = Executions, Method~Race, row_pct = FALSE, digits = 3,
caption = NULL)
AmesHousing <- readr::read_csv("temp/AmesHousing.csv")
tbl_num_sum(AmesHousing, ~SalePrice, digits = 3, na_rm = FALSE,
caption = NULL)
tally(AmesHousing$SalePrice)
AmesHousing %>% filter(is.na(SalePrice))
find_na(AmesHousing, SalePrice)
find_na(AmesHousing, SalesPrice)
find_na(AmesHousing, ~SalePrice)
mosaic::favstats(x = ~SalePrice, data = AmesHousing)
mosaic::favstats(x = ~SalePrice, data = AmesHousing, na.rm = FALSE)
?favstats
devtools::load_all(".")
tbl_num_sum(AmesHousing, ~SalePrice, digits = 3, na_rm = FALSE,
caption = NULL)
tbl_num_sum(AmesHousing, SalePrice~`Central Air`, digits = 3, na_rm = FALSE,
caption = NULL)
use_test()
infer_anova(mtcars, cyl~gear)
devtools::load_all(".")
infer_anova(mtcars, cyl~gear)
lm(cyl~gear, data = mtcars)
anova(lm(cyl~gear, data = mtcars))
summary(mtcars)
head(mtcars)
infer_anova(mtcars, drat~gear)
devtools::load_all(".")
infer_anova(mtcars, drat~gear)
?aov
?anova
devtools::load_all(".")
infer_anova(mtcars, drat~gear)
devtools::load_all(".")
infer_anova(mtcars, drat~gear)
aov(drat~cyl, mtcars)
aov(drat~gear, mtcars)
summary(aov(drat~gear, mtcars))
infer_1prop(mtcars, ~vs, success = 1)
infer_paired(mtcars, var1 = ~drat, var2 = ~wt)
infer_2prop_test(mtcars, vs~am, success = 1)
source("~/Documents/coding/gvsu215/R/infer_alt.R", echo=TRUE)
infer_2prop(mtcars, vs~am, success = 1)
infer_2prop(mtcars, vs~am, success = 1, conf_int = TRUE)
infer_2prop(mtcars, vs~am, success = 1, conf_int = TRUE, conf_lvl = .9)
head(mtcars)
source("~/Documents/coding/gvsu215/R/infer_alt.R", echo=TRUE)
infer_2mean(mtcars, wt~vs)
infer_2mean(mtcars, wt~vs, conf_int = TRUE)
source("~/Documents/coding/gvsu215/R/infer_prop_mean.R", echo=TRUE)
infer_2mean(mtcars, wt~vs, conf_int = TRUE)
source("~/Documents/coding/gvsu215/R/infer_alt.R", echo=TRUE)
infer_2mean(mtcars, wt~vs, conf_int = TRUE)
infer_2prop(mtcars, vs~am, success = 1, conf_int = TRUE, conf_lvl = .9)
source("~/Documents/coding/gvsu215/R/infer_alt.R", echo=TRUE)
infer_2prop(mtcars, vs~am, success = 1, conf_int = TRUE, conf_lvl = .9)
infer_2mean(mtcars, wt~vs, conf_int = TRUE)
source("~/Documents/coding/gvsu215/R/infer_alt.R", echo=TRUE)
infer_2mean(mtcars, wt~vs, conf_int = TRUE)
infer_2prop(mtcars, vs~am, success = 1, conf_int = TRUE, conf_lvl = .9)
use_test()
devtools::load_all(".")
rm(list = c("infer_1mean", "infer_1prop", "infer_2mean_int", "infer_2mean_test", "infer_2prop_int",
"infer_2prop_test", "infer_paired"))
devtools::load_all(".")
infer_anova(mtcars, cyl~gear, digits = 2)
devtools::load_all(".")
infer_anova(mtcars, cyl~gear, digits = 2)
devtools::load_all(".")
infer_anova(mtcars, cyl~gear, digits = 2)
?update_packages
use_test()
test_active_file()
test_active_file()
check()
rm(list = c("infer_2mean", "infer_2prop"))
plot_bar(mtcars, ~cyl)
use_test()
tbl_num_sum(mtcars, ~wt)
tbl_num_sum(mtcars, ~wt, na_rm = TRUE)
data()
head(cars)
head(airquality)
summary(airquality)
tbl_num_sum(airquality, ~Ozone, na_rm = FALSE)
test_that("num sum warns with NAs and na_rm = FALSE", {
expect_warning(tbl_num_sum(airquality, ~Ozone, na_rm = FALSE))
})
devtools::load_all(".")
tbl_num_sum(airquality, ~Ozone, na_rm = FALSE)
head(airquality)
tbl_num_sum(airquality, Ozone~Month, na_rm = FALSE)
tbl_num_sum(airquality, Ozone~Month, na_rm = TRUE)
tbl_num_sum(mtcars, ~wt)
tbl_num_sum(airquality, Ozone~Month, na_rm = TRUE)
devtools::load_all(".")
test_active_file()
check()
plot_bar(mtcars, ~cyl)
?after_stat
install.packages(c("fontawesome", "gtable", "markdown", "proj4", "quantreg", "rsconnect", "snakecase", "uuid", "wk"))
install.packages(c("fontawesome", "gtable", "markdown", "proj4", "quantreg", "rsconnect", "snakecase", "uuid", "wk"))
install.packages(c("fontawesome", "gtable", "markdown", "proj4", "quantreg", "rsconnect", "snakecase", "uuid", "wk"))
check()
library(devtools)
check()
?after_stat
infer_anova(mtcars, cyl~gear, digits = 2)
infer_anova(mtcars, cyl~gear, digits = 2) %>% flextable::save_as_image("man/figures/README-infer_anova.png")
use_vignette("cheatsheet")
build_rmd("vignettes/cheatsheet.Rmd")
# install.packages("remotes")
remotes::install_github("rlesur/klippy")
build_rmd("vignettes/cheatsheet.Rmd")
build_rmd("vignettes/cheatsheet.Rmd")
build_rmd("vignettes/cheatsheet.Rmd")
head(airquality)
tbl_corr(airquality, Ozone~Solar.R)
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
plot_scatter(mtcars, wt~drat, ls_line = TRUE)
plot_scatter(mtcars, wt~drat, fill = ~cyl, ls_line = TRUE)
use_package("rlang", min_version = TRUE)
?rlang::warning_cnd
?rlang::warn
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cyl")
devtools::load_all(".")
plot_scatter(mtcars, wt~drat, fill = ~cyl)
plot_scatter(mtcars, wt~drat, fill = ~cyl, legend_title = "Cylinders")
devtools::load_all(".")
build_rmd("vignettes/cheatsheet.Rmd")
build_rmd("vignettes/cheatsheet.Rmd")
build_site()
build_site()
plot_bar(mtcars, ~cyl)
head(airquality)
plot_bar(airquality, Month)
plot_bar(airquality, ~Month)
plot_bar(airquality, ~Day)
devtools::load_all(".")
plot_bar(airquality, ~Day)
plot_bar(airquality, ~Month)
plot_bar(airquality, ~Day)
data()
head(Seatbelts)
plot_hist(Seatbelts, ~DriversKilled)
plot_hist(Seatbelts, ~VanKilled)
gf_histogram(~VanKilled, Seatbelts)
head(co2)
head(CO2)
plot_bar(CO2, ~Planat)
plot_bar(CO2, ~Plant)
devtools::load_all(".")
plot_bar(CO2, ~Plant)
devtools::load_all(".")
plot_bar(CO2, ~Plant)
plot_bar(CO2, ~Type)
plot_bar(CO2, ~Treatment)
plot_hist(CO2, ~uptake)
plot_hist(CO2, ~uptake, binwidth = 1)
plot_hist(CO2, ~uptake, binwidth = 2)
plot_hist(CO2, ~uptake, binwidth = 5)
head(AirPassengers)
AirPassengers
head(USArrests)
head(Titanic)
Titanic
WWWusager
WWWusage
chickwts
head(chickwts)
plot_hist(chickwts, ~weight, group = ~feed)
plot_hist(chickwts, ~weight, group = ~feed, group_cols = 3)
devtools::load_all(".")
plot_hist(chickwts, ~weight, group = ~feed, group_cols = 3)
head(ToothGrowth)
plot_bar(ToothGrowth, supp~dose)
plot_bar(ToothGrowth, ~supp, fill = ~dose)
plot_box(ToothGrowth, ~len)
plot_bar(ToothGrowth, ~len)
plot_bar(ToothGrowth, ~len, binwidth = 1)
plot_bar(ToothGrowth, ~len, binwidth = 3)
plot_hist(ToothGrowth, ~len, binwidth = 1)
plot_hist(ToothGrowth, ~len, binwidth = 3)
plot_bar(AmesHousing, ~SaleCondition)
plot_bar(AmesHousing, ~SaleCondition, type = "count")
devtools::load_all(".")
plot_bar(AmesHousing, ~SaleCondition, type = "count")
devtools::load_all(".")
plot_bar(AmesHousing, ~SaleCondition, type = "count")
plot_bar(AmesHousing, ~SaleCondition)
plot_box(Ames)
plot_box(AmesHousing, ~`Garage Area`)
?max
devtools::load_all(".")
plot_box(AmesHousing, ~`Garage Area`)
plot_box(AmesHousing, ~`Garage Area`, na_rm = TRUE)
plot_hist(AmesHousing, ~`Garage Area`)
devtools::load_all(".")
plot_hist(AmesHousing, ~`Garage Area`)
?gf_histogram
summart(AmesHousing$`Garage Area`)
summary(AmesHousing$`Garage Area`)
devtools::load_all(".")
plot_hist(AmesHousing, ~`Garage Area`, group = ~`Central Air`)
devtools::load_all(".")
plot_hist(AmesHousing, ~`Garage Area`, group = ~`Central Air`)
devtools::load_all(".")
plot_hist(AmesHousing, ~`Garage Area`, group = ~`Central Air`)
devtools::load_all(".")
rlang::last_trace()
devtools::load_all(".")
plot_hist(AmesHousing, ~`Garage Area`, group = ~`Central Air`)
plot_hist(AmesHousing, ~`Garage Area`, group = ~`Central Air`, group_cols = 1)
plot_hist(AmesHousing, ~`Garage Area`, group = ~`Central Air`, group_cols = 2)
summary(AmesHousing)
plot_box(AmesHousing, ~`Lot Frontage`)
devtools::load_all(".")
plot_box(AmesHousing, ~`Lot Frontage`)
devtools::load_all(".")
plot_box(AmesHousing, ~`Lot Frontage`)
devtools::load_all(".")
plot_box(AmesHousing, ~`Lot Frontage`)
tbl_num_sum(AmesHousing, ~`Overall Qual`)
tbl_num_sum(AmesHousing, ~`Garage Area`)
tbl_num_sum(AmesHousing, ~`Garage Area`, na_rm = T)
devtools::load_all(".")
tbl_num_sum(AmesHousing, ~`Garage Area`, na_rm = T)
tbl_num_sum(AmesHousing, ~`Garage Area`, na_rm = T)
devtools::load_all(".")
tbl_num_sum(AmesHousing, ~`Garage Area`, na_rm = T)
tbl_num_sum(AmesHousing, `Garage Area`~`Paved Drive`, na_rm = T)
devtools::load_all(".")
tbl_num_sum(AmesHousing, `Garage Area`~`Paved Drive`, na_rm = T)
tbl_num_sum(AmesHousing, `Garage Area`~`Paved Drive`)
tbl_pctile(AmesHousing, ~`Paved Drive`)
tbl_pctile(AmesHousing, ~`Garage Area`)
quantile(~`Garage Area`, AmesHousing)
tbl_pctile(Executions, ~Age)
head(airquality)
tbl_pctile(airquality, ~Ozone)
tbl_pctile(airquality, ~Temp)
quantile(~Temp, airquality)
?quantile
mosaic::quantile(~Temp, airquality)
mosaic::quantile(formula = ~Temp, airquality)
?tribble
tibble::tribble(c(.1, .2, .4, .5))
tibble::tibble() %>%
dplyr::add_row(c(.2, .3, .5))
?rep
devtools::load_all(".")
tbl_pctile(airquality, ~Temp)
tbl_num_sum(airquality, ~Temp)
tbl_num_sum(airquality, ~Ozone)
tbl_pctile(airquality, ~Ozone)
source("~/Documents/coding/gvsu215/generate.R", echo=TRUE)
source("~/Documents/coding/gvsu215/generate.R", echo=TRUE)
revdep_check()
?revdep_check()
revdep()
?revdep
?revdep("gvsu215")
revdep("gvsu215")
use_cran_badge()
use_lifecycle_badge("stable")
?mosaicplot
Executions <- readr::read_csv("temp/Executions.csv")
mosaicplot(~Method, Executions)
mosaicplot(~Method, Executions, color = TRUE)
mosaicplot(~Sex, Executions, color = TRUE)
devtools::load_all(".")
tbl_corr(mtcars, wt~drat | gear)
tbl_corr(mtcars, wt~drat)
infer_paired(mtcars, var1 = ~drat, var2 = ~wt)
library(devtools)
build_site()
use_vignette("instructor_guide")
-1.0009 < -1.001
-1.001 < -1.01
-1.0009 > -1.001
-1.001 > -1.01
?aov
build_site()
```{r}
library(devtools)
test_active_file()
